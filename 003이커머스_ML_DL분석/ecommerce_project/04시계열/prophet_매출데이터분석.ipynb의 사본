{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"14pZdjcg13OJc33uM6vmVmXgRP-Agn5uK","authorship_tag":"ABX9TyPxeh5WmPji4mAlASYESi4L"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"gEuzUI9713do","executionInfo":{"status":"ok","timestamp":1662514185397,"user_tz":-540,"elapsed":1138,"user":{"displayName":"이현창","userId":"00181146461246713555"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib\n","import matplotlib.pyplot as plt\n","\n"]},{"cell_type":"markdown","source":["#####Prophet\n"],"metadata":{"id":"zlXtbG2Podap"}},{"cell_type":"code","source":["!pip install prophet"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xAP-K0M7kdjO","executionInfo":{"status":"ok","timestamp":1662514281710,"user_tz":-540,"elapsed":4437,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"23f99d46-43a8-4402-cbd5-5a35113ac711"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: prophet in /usr/local/lib/python3.7/dist-packages (1.1)\n","Requirement already satisfied: setuptools-git>=1.2 in /usr/local/lib/python3.7/dist-packages (from prophet) (1.2)\n","Requirement already satisfied: numpy>=1.15.4 in /usr/local/lib/python3.7/dist-packages (from prophet) (1.21.6)\n","Requirement already satisfied: convertdate>=2.1.2 in /usr/local/lib/python3.7/dist-packages (from prophet) (2.4.0)\n","Requirement already satisfied: holidays>=0.13 in /usr/local/lib/python3.7/dist-packages (from prophet) (0.15)\n","Requirement already satisfied: Cython>=0.22 in /usr/local/lib/python3.7/dist-packages (from prophet) (0.29.32)\n","Requirement already satisfied: setuptools>=42 in /usr/local/lib/python3.7/dist-packages (from prophet) (57.4.0)\n","Requirement already satisfied: pandas>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from prophet) (1.3.5)\n","Requirement already satisfied: wheel>=0.37.0 in /usr/local/lib/python3.7/dist-packages (from prophet) (0.37.1)\n","Requirement already satisfied: tqdm>=4.36.1 in /usr/local/lib/python3.7/dist-packages (from prophet) (4.64.0)\n","Requirement already satisfied: LunarCalendar>=0.0.9 in /usr/local/lib/python3.7/dist-packages (from prophet) (0.0.9)\n","Requirement already satisfied: python-dateutil>=2.8.0 in /usr/local/lib/python3.7/dist-packages (from prophet) (2.8.2)\n","Requirement already satisfied: matplotlib>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from prophet) (3.2.2)\n","Collecting cmdstanpy>=1.0.1\n","  Downloading cmdstanpy-1.0.7-py3-none-any.whl (80 kB)\n","\u001b[K     |████████████████████████████████| 80 kB 5.6 MB/s \n","\u001b[?25hRequirement already satisfied: ujson in /usr/local/lib/python3.7/dist-packages (from cmdstanpy>=1.0.1->prophet) (5.4.0)\n","Requirement already satisfied: pymeeus<=1,>=0.3.13 in /usr/local/lib/python3.7/dist-packages (from convertdate>=2.1.2->prophet) (0.5.11)\n","Requirement already satisfied: korean-lunar-calendar in /usr/local/lib/python3.7/dist-packages (from holidays>=0.13->prophet) (0.2.1)\n","Requirement already satisfied: hijri-converter in /usr/local/lib/python3.7/dist-packages (from holidays>=0.13->prophet) (2.2.4)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.7/dist-packages (from LunarCalendar>=0.0.9->prophet) (2022.2.1)\n","Requirement already satisfied: ephem>=3.7.5.3 in /usr/local/lib/python3.7/dist-packages (from LunarCalendar>=0.0.9->prophet) (4.1.3)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.0.0->prophet) (1.4.4)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.0.0->prophet) (0.11.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=2.0.0->prophet) (3.0.9)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib>=2.0.0->prophet) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.8.0->prophet) (1.15.0)\n","Installing collected packages: cmdstanpy\n","  Attempting uninstall: cmdstanpy\n","    Found existing installation: cmdstanpy 0.9.5\n","    Uninstalling cmdstanpy-0.9.5:\n","      Successfully uninstalled cmdstanpy-0.9.5\n","Successfully installed cmdstanpy-1.0.7\n"]}]},{"cell_type":"code","source":["\n","# from sklearn.linear_model import LinearRegression\n","# from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, StratifiedKFold, cross_validate, train_test_split # train,test\n","# from sklearn.preprocessing import PolynomialFeatures, StandardScaler     # 정규화,표준화작업\n","# from sklearn.ensemble import RandomForestRegressor\n","# from sklearn.metrics import mean_absolute_error\n","# import numpy as np\n","# import pandas as pd\n","# import matplotlib.pyplot as plt\n","# import matplotlib\n","# import seaborn as sns\n","# from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\n","# from statsmodels.stats.outliers_influence import variance_inflation_factor\n","# import seaborn as sns\n","# import warnings\n","# warnings.filterwarnings(\"ignore\")\n","from prophet import Prophet"],"metadata":{"id":"nDGKQVcFR5yM","executionInfo":{"status":"ok","timestamp":1662514294409,"user_tz":-540,"elapsed":684,"user":{"displayName":"이현창","userId":"00181146461246713555"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["data = {'ds' : ['2022/01/' + str(x) for x in range(1,16)],'y' :  [167, 3423, 7228, 7652, 7493, 7426, 8177, 7739, 7614, 7719, 8249, 8311, 7933, 8540, 8626]}\n"],"metadata":{"id":"vg4zM5rVi8Of","executionInfo":{"status":"ok","timestamp":1662514811801,"user_tz":-540,"elapsed":264,"user":{"displayName":"이현창","userId":"00181146461246713555"}}},"execution_count":42,"outputs":[]},{"cell_type":"code","source":["data = pd.DataFrame(data)\n","data['ds'] = pd.to_datetime(data['ds'])"],"metadata":{"id":"UnMNN9P0lrVE","executionInfo":{"status":"ok","timestamp":1662514812944,"user_tz":-540,"elapsed":2,"user":{"displayName":"이현창","userId":"00181146461246713555"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["# 2. 데이터 확인\n","# 일반 머신러닝은 train_data, test_data를 분리해서 러닝후 예측\n","# 시계열 예측은 특정 시점을 가지고 데이터를 분리\n","# 이전까지의 10일 train_data, next 5일을 test_data로 분리\n","# tail 향후 5일이 됨.\n","\n","print(data.tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qqz3x7cbR5vf","executionInfo":{"status":"ok","timestamp":1662514816351,"user_tz":-540,"elapsed":264,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"6629f0d4-9bf6-4e61-be29-b34cf6fb316d"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["           ds     y\n","10 2022-01-11  8249\n","11 2022-01-12  8311\n","12 2022-01-13  7933\n","13 2022-01-14  8540\n","14 2022-01-15  8626\n"]}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L1c6IdO9mrBQ","executionInfo":{"status":"ok","timestamp":1658824418053,"user_tz":-540,"elapsed":384,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"94b1d8a5-50b1-4102-cce9-9ad9818d8956"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n","  \n"]}]},{"cell_type":"code","source":["m=Prophet(\n","    changepoint_prior_scale=0.65,   # 값이 커질수록 모델을 유연하게 만든다\n","    changepoint_range=0.80,   # 데이터 앞쪽 몇 퍼센트 부분 안에서 변화점을 만들것인지 설정\n","    yearly_seasonality=False,\n","    weekly_seasonality=True,\n","    daily_seasonality=True,\n","    seasonality_mode='additive'\n",")\n"],"metadata":{"id":"Pa0O0m0Jmq-x","executionInfo":{"status":"ok","timestamp":1662514819981,"user_tz":-540,"elapsed":265,"user":{"displayName":"이현창","userId":"00181146461246713555"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["m.fit(data)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AqJxkn8woG6K","executionInfo":{"status":"ok","timestamp":1662514825210,"user_tz":-540,"elapsed":4027,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"fbb53ec4-7a45-4649-b62c-592987a145d8"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stderr","text":["INFO:prophet:n_changepoints greater than number of observations. Using 11.\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp9b7_lalk/hgrilva4.json\n","DEBUG:cmdstanpy:input tempfile: /tmp/tmp9b7_lalk/rbn8fc0k.json\n","DEBUG:cmdstanpy:idx 0\n","DEBUG:cmdstanpy:running CmdStan, num_threads: None\n","DEBUG:cmdstanpy:CmdStan args: ['/usr/local/lib/python3.7/dist-packages/prophet/stan_model/prophet_model.bin', 'random', 'seed=13160', 'data', 'file=/tmp/tmp9b7_lalk/hgrilva4.json', 'init=/tmp/tmp9b7_lalk/rbn8fc0k.json', 'output', 'file=/tmp/tmpkg5rap5u/prophet_model-20220907014020.csv', 'method=optimize', 'algorithm=newton', 'iter=10000']\n","01:40:21 - cmdstanpy - INFO - Chain [1] start processing\n","INFO:cmdstanpy:Chain [1] start processing\n","01:40:24 - cmdstanpy - INFO - Chain [1] done processing\n","INFO:cmdstanpy:Chain [1] done processing\n"]},{"output_type":"execute_result","data":{"text/plain":["<prophet.forecaster.Prophet at 0x7f5e5248d350>"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["# prophet 을 이용하여 미래예측할 범위 설정\n","future = m.make_future_dataframe(periods=30)\n","forecast = m.predict(future)\n","\n","# fig = plt.plot(m, forecast)\n","\n","# print('m:',m)\n","print('forcast:',forecast)\n","\n","\n","# order_date\n","# 2018-12-26     814.5940\n","# 2018-12-27     177.6360\n","# 2018-12-28    1657.3508\n","# 2018-12-29    2915.5340\n","# 2018-12-30     713.7900\n","\n","#  yhat  \n","# 1225                         0.0  2632.906705  \n","# 1226                         0.0  2435.938234  \n","# 1227                         0.0  2553.198997  \n","# 1228                         0.0  2928.352235  \n","# 1229                         0.0  2522.588644 \n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UH6hiPxsmq36","executionInfo":{"status":"ok","timestamp":1662515010483,"user_tz":-540,"elapsed":2565,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"b46003ac-943d-4fc8-a760-8fd4a223e3d5"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["forcast:            ds         trend     yhat_lower     yhat_upper    trend_lower  \\\n","0  2022-01-01   -528.839358     166.999782     166.999782    -528.839358   \n","1  2022-01-02    304.389112    3423.000186    3423.000186     304.389112   \n","2  2022-01-03   1763.797407    7227.999558    7227.999558    1763.797407   \n","3  2022-01-04   2939.127491    7651.998731    7651.998732    2939.127491   \n","4  2022-01-05   3644.445320    7492.996982    7492.996982    3644.445320   \n","5  2022-01-06   5111.346528    7425.993800    7425.993801    5111.346528   \n","6  2022-01-07   6411.247759    8176.990000    8176.990000    6411.247759   \n","7  2022-01-08   7043.151551    7738.990690    7738.990690    7043.151551   \n","8  2022-01-09   4495.382352    7613.993426    7613.993426    4495.382352   \n","9  2022-01-10   2254.794256    7718.996407    7718.996407    2254.794256   \n","10 2022-01-11   3536.128022    8248.999262    8248.999262    3536.128022   \n","11 2022-01-12   4462.449517    8311.001178    8311.001178    4462.449517   \n","12 2022-01-13   5618.356314    7933.003586    7933.003586    5618.356314   \n","13 2022-01-14   6774.263111    8540.005351    8540.005352    6774.263111   \n","14 2022-01-15   7930.169908    8626.009048    8626.009048    7930.169908   \n","15 2022-01-16   9086.076706   11652.328557   12760.402026    8533.717484   \n","16 2022-01-17  10241.983503   13644.700099   17533.977714    8180.497947   \n","17 2022-01-18  11397.890300   11965.598805   19883.940717    7252.727564   \n","18 2022-01-19  12553.797098    9623.913939   22484.683896    5775.362277   \n","19 2022-01-20  13709.703895    6348.134499   24711.666811    4033.487226   \n","20 2022-01-21  14865.610692    3778.419879   28332.222010    2012.677639   \n","21 2022-01-22  16021.517489     682.090356   31369.629999     -13.748783   \n","22 2022-01-23  17177.424287     459.605323   38778.303773   -2659.005751   \n","23 2022-01-24  18333.331084      52.606294   46126.987570   -5411.595858   \n","24 2022-01-25  19489.237881   -3207.057194   50898.459732   -7919.928435   \n","25 2022-01-26  20645.144679   -7072.615550   55533.111561  -10921.167212   \n","26 2022-01-27  21801.051476  -13095.476360   59095.960281  -15410.123633   \n","27 2022-01-28  22956.958273  -17631.875100   63701.257332  -19397.617340   \n","28 2022-01-29  24112.865070  -22864.697026   69209.074185  -23560.536165   \n","29 2022-01-30  25268.771868  -24866.710788   77686.885667  -27985.321862   \n","30 2022-01-31  26424.678665  -26231.197266   86570.387666  -31695.399418   \n","31 2022-02-01  27580.585462  -31739.063546   92138.957331  -36451.934786   \n","32 2022-02-02  28736.492260  -38318.243891   98504.670931  -42166.795553   \n","33 2022-02-03  29892.399057  -41766.256923  103512.271687  -44080.904196   \n","34 2022-02-04  31048.305854  -46575.891583  109810.342190  -48341.633823   \n","35 2022-02-05  32204.212651  -51623.580658  116213.290638  -52319.419797   \n","36 2022-02-06  33360.119449  -57814.118871  123671.472949  -60932.729945   \n","37 2022-02-07  34516.026246  -62885.335757  132883.749718  -68349.537908   \n","38 2022-02-08  35671.933043  -67176.917224  138217.998782  -71889.788464   \n","39 2022-02-09  36827.839841  -73736.489879  145109.271649  -77585.041541   \n","40 2022-02-10  37983.746638  -83030.062416  149232.395942  -85344.709689   \n","41 2022-02-11  39139.653435  -90794.943586  157529.518888  -92560.685826   \n","42 2022-02-12  40295.560232  -98337.451189  165727.074089  -99033.290328   \n","43 2022-02-13  41451.467030 -102358.064911  175677.138823 -105476.675985   \n","44 2022-02-14  42607.373827 -105987.025687  186049.248927 -111451.227839   \n","\n","      trend_upper  additive_terms  additive_terms_lower  additive_terms_upper  \\\n","0     -528.839358      695.839139            695.839139            695.839139   \n","1      304.389112     3118.611074           3118.611074           3118.611074   \n","2     1763.797407     5464.202152           5464.202152           5464.202152   \n","3     2939.127491     4712.871240           4712.871240           4712.871240   \n","4     3644.445320     3848.551662           3848.551662           3848.551662   \n","5     5111.346528     2314.647273           2314.647273           2314.647273   \n","6     6411.247759     1765.742240           1765.742240           1765.742240   \n","7     7043.151551      695.839139            695.839139            695.839139   \n","8     4495.382352     3118.611074           3118.611074           3118.611074   \n","9     2254.794256     5464.202152           5464.202152           5464.202152   \n","10    3536.128022     4712.871240           4712.871240           4712.871240   \n","11    4462.449517     3848.551662           3848.551662           3848.551662   \n","12    5618.356314     2314.647273           2314.647273           2314.647273   \n","13    6774.263111     1765.742240           1765.742240           1765.742240   \n","14    7930.169908      695.839139            695.839139            695.839139   \n","15    9641.790952     3118.611074           3118.611074           3118.611074   \n","16   12069.775562     5464.202152           5464.202152           5464.202152   \n","17   15171.069477     4712.871240           4712.871240           4712.871240   \n","18   18636.132234     3848.551662           3848.551662           3848.551662   \n","19   22397.019538     2314.647273           2314.647273           2314.647273   \n","20   26566.479770     1765.742240           1765.742240           1765.742240   \n","21   30673.790859      695.839139            695.839139            695.839139   \n","22   35659.692699     3118.611074           3118.611074           3118.611074   \n","23   40662.785419     5464.202151           5464.202151           5464.202151   \n","24   46185.588492     4712.871240           4712.871240           4712.871240   \n","25   51684.559899     3848.551662           3848.551662           3848.551662   \n","26   56781.313008     2314.647273           2314.647273           2314.647273   \n","27   61935.515092     1765.742240           1765.742240           1765.742240   \n","28   68513.235046      695.839139            695.839139            695.839139   \n","29   74568.274593     3118.611074           3118.611074           3118.611074   \n","30   81106.185514     5464.202151           5464.202151           5464.202151   \n","31   87426.086091     4712.871240           4712.871240           4712.871240   \n","32   94656.119269     3848.551662           3848.551662           3848.551662   \n","33  101197.624414     2314.647273           2314.647273           2314.647273   \n","34  108044.599949     1765.742240           1765.742240           1765.742240   \n","35  115517.451499      695.839139            695.839139            695.839139   \n","36  120552.861875     3118.611074           3118.611074           3118.611074   \n","37  127419.547567     5464.202152           5464.202152           5464.202152   \n","38  133505.127542     4712.871240           4712.871240           4712.871240   \n","39  141260.719987     3848.551662           3848.551662           3848.551662   \n","40  146917.748669     2314.647273           2314.647273           2314.647273   \n","41  155763.776648     1765.742240           1765.742240           1765.742240   \n","42  165031.234949      695.839139            695.839139            695.839139   \n","43  172558.527749     3118.611074           3118.611074           3118.611074   \n","44  180585.046776     5464.202152           5464.202152           5464.202152   \n","\n","          daily  daily_lower  daily_upper       weekly  weekly_lower  \\\n","0   3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","1   3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","2   3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","3   3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","4   3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","5   3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","6   3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","7   3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","8   3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","9   3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","10  3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","11  3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","12  3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","13  3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","14  3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","15  3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","16  3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","17  3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","18  3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","19  3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","20  3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","21  3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","22  3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","23  3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","24  3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","25  3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","26  3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","27  3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","28  3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","29  3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","30  3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","31  3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","32  3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","33  3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","34  3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","35  3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","36  3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","37  3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","38  3131.494969  3131.494969  3131.494969  1581.376272   1581.376272   \n","39  3131.494969  3131.494969  3131.494969   717.056693    717.056693   \n","40  3131.494969  3131.494969  3131.494969  -816.847696   -816.847696   \n","41  3131.494969  3131.494969  3131.494969 -1365.752728  -1365.752728   \n","42  3131.494969  3131.494969  3131.494969 -2435.655829  -2435.655829   \n","43  3131.494969  3131.494969  3131.494969   -12.883895    -12.883895   \n","44  3131.494969  3131.494969  3131.494969  2332.707183   2332.707183   \n","\n","    weekly_upper  multiplicative_terms  multiplicative_terms_lower  \\\n","0   -2435.655829                   0.0                         0.0   \n","1     -12.883895                   0.0                         0.0   \n","2    2332.707183                   0.0                         0.0   \n","3    1581.376272                   0.0                         0.0   \n","4     717.056693                   0.0                         0.0   \n","5    -816.847696                   0.0                         0.0   \n","6   -1365.752728                   0.0                         0.0   \n","7   -2435.655829                   0.0                         0.0   \n","8     -12.883895                   0.0                         0.0   \n","9    2332.707183                   0.0                         0.0   \n","10   1581.376272                   0.0                         0.0   \n","11    717.056693                   0.0                         0.0   \n","12   -816.847696                   0.0                         0.0   \n","13  -1365.752728                   0.0                         0.0   \n","14  -2435.655829                   0.0                         0.0   \n","15    -12.883895                   0.0                         0.0   \n","16   2332.707183                   0.0                         0.0   \n","17   1581.376272                   0.0                         0.0   \n","18    717.056693                   0.0                         0.0   \n","19   -816.847696                   0.0                         0.0   \n","20  -1365.752728                   0.0                         0.0   \n","21  -2435.655829                   0.0                         0.0   \n","22    -12.883895                   0.0                         0.0   \n","23   2332.707183                   0.0                         0.0   \n","24   1581.376272                   0.0                         0.0   \n","25    717.056693                   0.0                         0.0   \n","26   -816.847696                   0.0                         0.0   \n","27  -1365.752728                   0.0                         0.0   \n","28  -2435.655829                   0.0                         0.0   \n","29    -12.883895                   0.0                         0.0   \n","30   2332.707183                   0.0                         0.0   \n","31   1581.376272                   0.0                         0.0   \n","32    717.056693                   0.0                         0.0   \n","33   -816.847696                   0.0                         0.0   \n","34  -1365.752728                   0.0                         0.0   \n","35  -2435.655829                   0.0                         0.0   \n","36    -12.883895                   0.0                         0.0   \n","37   2332.707183                   0.0                         0.0   \n","38   1581.376272                   0.0                         0.0   \n","39    717.056693                   0.0                         0.0   \n","40   -816.847696                   0.0                         0.0   \n","41  -1365.752728                   0.0                         0.0   \n","42  -2435.655829                   0.0                         0.0   \n","43    -12.883895                   0.0                         0.0   \n","44   2332.707183                   0.0                         0.0   \n","\n","    multiplicative_terms_upper          yhat  \n","0                          0.0    166.999782  \n","1                          0.0   3423.000186  \n","2                          0.0   7227.999558  \n","3                          0.0   7651.998732  \n","4                          0.0   7492.996982  \n","5                          0.0   7425.993801  \n","6                          0.0   8176.990000  \n","7                          0.0   7738.990690  \n","8                          0.0   7613.993426  \n","9                          0.0   7718.996407  \n","10                         0.0   8248.999262  \n","11                         0.0   8311.001178  \n","12                         0.0   7933.003586  \n","13                         0.0   8540.005351  \n","14                         0.0   8626.009048  \n","15                         0.0  12204.687780  \n","16                         0.0  15706.185654  \n","17                         0.0  16110.761540  \n","18                         0.0  16402.348759  \n","19                         0.0  16024.351167  \n","20                         0.0  16631.352932  \n","21                         0.0  16717.356629  \n","22                         0.0  20296.035361  \n","23                         0.0  23797.533235  \n","24                         0.0  24202.109121  \n","25                         0.0  24493.696340  \n","26                         0.0  24115.698748  \n","27                         0.0  24722.700513  \n","28                         0.0  24808.704210  \n","29                         0.0  28387.382942  \n","30                         0.0  31888.880816  \n","31                         0.0  32293.456702  \n","32                         0.0  32585.043921  \n","33                         0.0  32207.046329  \n","34                         0.0  32814.048095  \n","35                         0.0  32900.051791  \n","36                         0.0  36478.730523  \n","37                         0.0  39980.228397  \n","38                         0.0  40384.804283  \n","39                         0.0  40676.391502  \n","40                         0.0  40298.393910  \n","41                         0.0  40905.395676  \n","42                         0.0  40991.399372  \n","43                         0.0  44570.078104  \n","44                         0.0  48071.575978  \n"]}]},{"cell_type":"code","source":["plt.plot(forecast['ds'],forecast['yhat'])\n","plt.plot(data['ds'],data['y'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"2W95eelGnGGi","executionInfo":{"status":"ok","timestamp":1662515031723,"user_tz":-540,"elapsed":307,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"910748e8-9697-4148-aef7-51db429ecae9"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f5e516459d0>]"]},"metadata":{},"execution_count":57},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["forecast.columns\n","print(forecast['yhat'][-10:-5])\n","\n","yhat= forecast['yhat'][-10:-5]\n","yreal = data.tail()\n","\n","print(data.tail())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cJVimEPCqsZc","executionInfo":{"status":"ok","timestamp":1662514835695,"user_tz":-540,"elapsed":261,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"eaba5e98-5cae-4d0f-f49b-4dd1162af343"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["10    8248.999262\n","11    8311.001178\n","12    7933.003586\n","13    8540.005351\n","14    8626.009048\n","Name: yhat, dtype: float64\n","           ds     y\n","10 2022-01-11  8249\n","11 2022-01-12  8311\n","12 2022-01-13  7933\n","13 2022-01-14  8540\n","14 2022-01-15  8626\n"]}]},{"cell_type":"code","source":["# plt.plot(forecast['ds'],forecast['yhat'],color='green')\n","\n","\n","plt.plot(x,y, 'g-') #예측값\n","plt.plot(forecast['ds'],forecast['yhat'], 'r-') #실제값\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":240},"id":"67YjAYH0sMg-","executionInfo":{"status":"error","timestamp":1662514838554,"user_tz":-540,"elapsed":292,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"9d61dfcf-6beb-4487-ec6d-f71ac7c75673"},"execution_count":49,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-49-8de7ef400c3f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'g-'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#예측값\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mforecast\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ds'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mforecast\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'yhat'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r-'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#실제값\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}]},{"cell_type":"code","source":["# plt.plot(x,y,color='gold')\n","# plt.plot(['2018-12-26','2018-12-27','2018-12-28','2018-12-29','2018-12-30'],yreal, ['2018-12-26','2018-12-27','2018-12-28','2018-12-29','2018-12-30'],yhat, 'r-')\n","plt.plot(['2018-12-26','2018-12-27','2018-12-28','2018-12-29','2018-12-30'],yreal, 'g-') #실제값\n","plt.plot(['2018-12-26','2018-12-27','2018-12-28','2018-12-29','2018-12-30'],yhat, 'r-') #예측값\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"id":"QHV1kHrFtDMI","executionInfo":{"status":"error","timestamp":1662514841906,"user_tz":-540,"elapsed":293,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"3b42ade1-acd0-40db-9bec-de71f755c057"},"execution_count":50,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-d45885603dc9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2018-12-26'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-27'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-28'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-29'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-30'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myreal\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'g-'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#실제값\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2018-12-26'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-27'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-28'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-29'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'2018-12-30'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0myhat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r-'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#예측값\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(*args, **kw)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mglobal\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_show\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36mshow\u001b[0;34m(close, block)\u001b[0m\n\u001b[1;32m     41\u001b[0m             display(\n\u001b[1;32m     42\u001b[0m                 \u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m                 \u001b[0mmetadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_fetch_figure_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigure_manager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m             )\n\u001b[1;32m     45\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36m_fetch_figure_metadata\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m    179\u001b[0m         \u001b[0;31m# the background is transparent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m         ticksLight = _is_light([label.get_color()\n\u001b[0;32m--> 181\u001b[0;31m                                 \u001b[0;32mfor\u001b[0m \u001b[0maxes\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m                                 \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myaxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m                                 for label in axis.get_ticklabels()])\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/ipykernel/pylab/backend_inline.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    181\u001b[0m                                 \u001b[0;32mfor\u001b[0m \u001b[0maxes\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    182\u001b[0m                                 \u001b[0;32mfor\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0myaxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m                                 for label in axis.get_ticklabels()])\n\u001b[0m\u001b[1;32m    184\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mticksLight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mticksLight\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mticksLight\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m             \u001b[0;31m# there are one or more tick labels, all with the same lightness\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_ticklabels\u001b[0;34m(self, minor, which)\u001b[0m\n\u001b[1;32m   1318\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mminor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1319\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_minorticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1320\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_majorticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1321\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1322\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_majorticklines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_majorticklabels\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1274\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_majorticklabels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1275\u001b[0m         \u001b[0;34m'Return a list of Text instances for the major ticklabels.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1276\u001b[0;31m         \u001b[0mticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_major_ticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1277\u001b[0m         \u001b[0mlabels1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel1\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtick\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mticks\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_visible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1278\u001b[0m         \u001b[0mlabels2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtick\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mticks\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mtick\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlabel2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_visible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_major_ticks\u001b[0;34m(self, numticks)\u001b[0m\n\u001b[1;32m   1429\u001b[0m         \u001b[0;34m'Get the tick instances; grow as necessary.'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1430\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnumticks\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1431\u001b[0;31m             \u001b[0mnumticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_majorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1432\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1433\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmajorTicks\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mnumticks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/axis.py\u001b[0m in \u001b[0;36mget_majorticklocs\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1346\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_majorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1347\u001b[0m         \u001b[0;34m\"\"\"Get the array of major tick locations in data coordinates.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1348\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmajor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlocator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1349\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1350\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget_minorticklocs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1336\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1337\u001b[0m         \u001b[0;34m'Return the locations of the ticks'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1338\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1339\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_locator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1340\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36mrefresh\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1362\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mrefresh\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1363\u001b[0m         \u001b[0;31m# docstring inherited\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1364\u001b[0;31m         \u001b[0mdmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mviewlim_to_dt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1365\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_locator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_locator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdmax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/dates.py\u001b[0m in \u001b[0;36mviewlim_to_dt\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1096\u001b[0m                              \u001b[0;34m'often happens if you pass a non-datetime '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1097\u001b[0m                              \u001b[0;34m'value to an axis that has datetime units'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1098\u001b[0;31m                              .format(vmin))\n\u001b[0m\u001b[1;32m   1099\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mnum2date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum2date\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtz\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1100\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: view limit minimum -28578.85 is less than 1 and is an invalid Matplotlib date value. This often happens if you pass a non-datetime value to an axis that has datetime units"]}]},{"cell_type":"code","source":["data.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZwOm6mzwrZcd","executionInfo":{"status":"ok","timestamp":1658826374862,"user_tz":-540,"elapsed":1271,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"6e11a43c-27bf-429f-d341-f36ffaacd48e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1550.0594809458535"]},"metadata":{},"execution_count":295}]},{"cell_type":"code","source":["\n","import pandas as pd\n","from sklearn.metrics import mean_squared_error\n","\n","rmse = mean_squared_error(yhat,yreal,squared=False)\n","mse = mean_squared_error(yhat,yreal)\n","rmse_2 = mse ** 0.5\n","print('mse',mse,'rmse',rmse)\n","print('rmse',rmse_2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iU0oJY3fqe3R","executionInfo":{"status":"ok","timestamp":1658825046045,"user_tz":-540,"elapsed":811,"user":{"displayName":"이현창","userId":"00181146461246713555"}},"outputId":"8c8ce374-d75b-4d64-d073-e7de7e63ea9d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["mse 2496130.1817899994 rmse 1579.9146121832025\n","rmse 1579.9146121832025\n"]}]}]}